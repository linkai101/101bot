const Discord = require('discord.js');
const { oneLine } = require('common-tags');
const Command = require('../base');
const pool = require('../../../../../lib/dbpool');

const path = require('path');
const { embedSettings } = require(path.join(__dirname, '..', '..', '..', '..', '..', 'config', 'config.json'));

module.exports = class DisableCommand extends Command {
	constructor(client) {
		super(client, {
			name: 'disable',
			aliases: ['disable-command', 'cmd-off', 'command-off'],
			group: 'commands',
			memberName: 'disable',
			description: 'Disables a command or command group.',
			details: oneLine`
				The argument must be the name/ID (partial or whole) of a command or command group.
				Only administrators may use this command.
			`,
			examples: ['disable util', 'disable Utility', 'disable prefix'],
			guarded: true,

			args: [
				{
					key: 'cmdOrGrp',
					label: 'command/group',
					prompt: 'Which command or group would you like to disable?',
					type: 'group|command'
				}
			]
		});
	}

	hasPermission(msg) {
		if(!msg.guild) return this.client.isOwner(msg.author);
		return this.client.isOwner(msg.author) || msg.member.hasPermission('ADMINISTRATOR');
	}

	run(msg, args) {
		if(!args.cmdOrGrp.isEnabledIn(msg.guild, true)) {
			return msg.reply(
				`The \`${args.cmdOrGrp.name}\` ${args.cmdOrGrp.group ? 'command' : 'group'} is already disabled.`
			);
		}
		if(args.cmdOrGrp.guarded) {
			return msg.reply(
				`You cannot disable the \`${args.cmdOrGrp.name}\` ${args.cmdOrGrp.group ? 'command' : 'group'}.`
			);
		}
		args.cmdOrGrp.setEnabledIn(msg.guild, false);
		if (!args.cmdOrGrp.group && !args.cmdOrGrp.guarded && msg.guild) module.exports.updateMySQLRecord(msg.guild.id, args.cmdOrGrp.id)
		return msg.reply(`Disabled the \`${args.cmdOrGrp.name}\` ${args.cmdOrGrp.group ? 'command' : 'group'}.`);
	}

	static updateMySQLRecord(guildID, module) {
		pool.query(`SELECT * FROM modules WHERE guildID = '${guildID}'`, function (err, result) {
			if (err) throw err;
			//console.log(result);

			let modulesRecord = {};
			if (result.length != 0) modulesRecord = JSON.parse(result[0].modules);

			if (!modulesRecord[module]) {
				//Object.assign(modulesRecord, {/**/: false});
				modulesRecord[module] = false;

				if (result.length == 0) {
					var addGuildRecord = `INSERT INTO modules (guildID, modules) VALUES ('${guildID}', '${JSON.stringify(modulesRecord)}')`;
					pool.query(addGuildRecord, function (err, result) {
						if (err) throw err;
						//console.log("MYSQL> Inserted 1 record into 'prefixes'");
					});
				} else {
					var changeModuleStatus = `UPDATE modules SET modules = '${JSON.stringify(modulesRecord)}' WHERE guildID = '${guildID}'`;
					pool.query(changeModuleStatus, function (err, result) {
						if (err) {throw err;}
						//console.log(result.affectedRows + " record(s) updated");
					});
				}
			} else {
				// Shouldn't ever be run, but a record exists with an enabled module, it is changed to disabled
				modulesRecord[module] = false;
				var changeModuleStatus = `UPDATE modules SET modules = '${JSON.stringify(modulesRecord)}' WHERE guildID = '${guildID}'`;
				pool.query(changeModuleStatus, function (err, result) {
					if (err) {throw err;}
					//console.log(result.affectedRows + " record(s) updated");
				});
			}
		});
	}
};
